// Code generated by go-bindata.
// sources:
// ../../release/linux/conf/contracts/cnsManager.cpp.abi.json
// ../../release/linux/conf/contracts/fireWall.abi.json
// ../../release/linux/conf/contracts/groupManager.cpp.abi.json
// ../../release/linux/conf/contracts/nodeManager.cpp.abi.json
// ../../release/linux/conf/contracts/paramManager.cpp.abi.json
// ../../release/linux/conf/contracts/userManager.cpp.abi.json
// DO NOT EDIT!

package precompile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ReleaseLinuxConfContractsCnsmanagerCppAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x6b\xb4\x30\x10\xbd\xfb\x2b\x42\xce\x7b\xfa\xbe\xd2\xc3\xde\xba\x85\x42\x2f\x16\xda\xe3\xb2\x87\xa0\xa3\x0c\xd4\x89\x24\x93\x05\x5b\xfa\xdf\x8b\x82\xae\xae\x60\x75\xb5\xed\x36\xe8\x41\xd1\x24\xf3\x98\xf7\x26\x2f\x83\xfb\x40\x08\x21\xde\xab\x7b\x79\x49\x52\x19\xc8\xad\x90\x11\xd9\x67\x48\xd1\x32\x98\x07\xa3\xb3\x47\x42\x96\x9b\xd3\x34\xa4\xdc\xb1\x95\x5b\xb1\x6f\xbe\x75\x03\xf5\x02\x56\xcf\x4d\x7f\x9c\x8b\xbc\x1a\xb7\x6c\x90\x52\xd9\x99\xf0\xb1\x19\x1b\xfd\x08\xc6\xa2\xa6\xc9\x00\xcd\xdb\xa1\x95\x9c\x76\x3c\x35\xbb\x21\x60\x24\xfe\xff\x6f\x0c\x6e\xa4\xc9\xb2\x22\x2e\x17\x25\xea\xd5\xb6\xf9\x6a\xa2\x25\x8e\x22\x2e\x53\x0d\x5a\x0c\x0d\x0b\xe8\xa3\x70\xa3\x01\x54\x1c\x1b\xb0\x76\xad\x8c\x6e\x65\xc4\x68\x20\x5a\xb7\xf4\x9f\x12\x2e\x05\xbe\xd7\xc4\x46\x45\x7c\xd7\xab\xea\x55\xbf\x33\xfc\x65\x80\xdb\x02\xb2\x71\x73\xf5\xab\x2d\x19\xe2\x5a\xc9\x99\x1a\xe6\x2a\x85\xd0\x65\x53\x8b\x75\xb4\x8a\x65\xfc\x17\x7c\x1b\xac\x93\xd1\xbb\xc1\x63\x15\x77\xc5\x93\xc1\x14\x69\x9e\x9a\xfa\x3c\xc6\x8c\x9c\xbd\x20\x1b\x93\x13\xd7\xbb\x22\xec\x1a\xd6\x4f\x59\xde\xd5\x9e\x28\xcb\xb2\xbb\xc8\x99\xe2\x5d\xbb\xf5\x5d\x76\xe1\x3d\xdb\xd7\xe5\xce\x1e\x5b\xc7\xef\x10\x1d\x6a\xc6\xa4\xb8\x8c\xd2\x1a\xcb\x21\xf1\xed\xcd\xd4\xd6\x64\x7a\xde\xf5\x0a\x38\x02\xf1\x97\xa6\x78\xf1\xaf\x8e\x79\x7d\xf3\x32\x69\x05\x87\xe0\x33\x00\x00\xff\xff\x6b\x0c\x17\xf6\xd4\x11\x00\x00")

func ReleaseLinuxConfContractsCnsmanagerCppAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsCnsmanagerCppAbiJson,
		"../../release/linux/conf/contracts/cnsManager.cpp.abi.json",
	)
}

func ReleaseLinuxConfContractsCnsmanagerCppAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsCnsmanagerCppAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/cnsManager.cpp.abi.json", size: 4564, mode: os.FileMode(436), modTime: time.Unix(1595301341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ReleaseLinuxConfContractsFirewallAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x3f\x6b\xc3\x30\x10\xc5\x77\x7f\x0a\xa1\xd9\x53\xbb\x65\x2b\xfd\x03\x9d\x3a\x74\x0c\xc1\x88\xe8\x52\x04\xca\x49\xe8\x4e\xb4\xa1\xe4\xbb\x97\x24\xd4\x95\xdb\xd0\xda\xe0\x62\x47\xc8\x83\xc1\xf6\xf9\xf7\xf0\xbb\xf7\xc0\xcb\x4a\x08\x21\xde\x8f\xe7\xc3\x21\x51\x6d\x41\x2e\x84\x6c\x1a\xda\x51\xf3\xf0\xfa\xe4\x01\x65\xfd\xf5\xdc\xa0\x8f\x4c\x72\x21\x96\xed\xbd\x2e\xe1\x07\x49\x69\x1d\x80\x28\x81\xb4\x23\xbc\xf3\xc7\x11\xe2\x60\xf0\x45\x76\x06\xf6\xed\xd5\x2a\x91\x77\x91\x87\xea\xff\x26\x6c\x90\xaf\xaf\xfa\xe8\xae\x1d\x12\x2b\xe4\xc3\x4b\x1b\x65\x09\x52\x4f\x3e\x69\x9b\x88\x6b\x36\x0e\x4f\xc0\x7d\xfd\x97\xb7\xb7\xd6\x75\x41\xc5\xdc\xf1\xcc\xbd\xd1\x7a\x1a\x6b\xeb\xde\x02\xa7\xef\xf9\x37\x7e\x88\x16\x4a\x32\xce\xd5\x0e\x54\xc8\x33\x1b\xf9\x2f\xef\x0e\x6c\x9e\xab\x2b\xb5\xfe\x46\x1b\x9a\x8c\x67\xe0\x92\x8c\x92\x8c\x73\xc9\x60\xc5\x91\xf2\xfd\xd1\xea\x2f\x9c\xda\xcb\x21\x8e\xe2\xee\xe3\xd6\xbb\x30\xf7\xea\xcd\x72\x6f\xd3\xb6\xe2\xfe\x6d\xba\xbd\x5d\x7c\x2b\xaa\x55\xf5\x11\x00\x00\xff\xff\x13\x44\xdc\x49\x3b\x0f\x00\x00")

func ReleaseLinuxConfContractsFirewallAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsFirewallAbiJson,
		"../../release/linux/conf/contracts/fireWall.abi.json",
	)
}

func ReleaseLinuxConfContractsFirewallAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsFirewallAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/fireWall.abi.json", size: 3899, mode: os.FileMode(436), modTime: time.Unix(1595301341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ReleaseLinuxConfContractsGroupmanagerCppAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xb1\x4e\xc3\x30\x10\xdd\xfb\x15\x96\xe7\x4c\x80\x18\xba\x51\x55\x42\x65\x28\x48\x8c\x55\x07\x2b\xbe\x04\x4b\xc9\xd9\xf2\x9d\x87\x0a\xf5\xdf\x91\x8d\x1a\x52\x01\xa5\x60\x20\x15\x24\x43\xa4\x24\xe7\xe7\x7b\xef\xdd\x8b\x57\x13\x21\x84\x78\x4c\xf7\x78\x49\x54\x2d\xc8\xa9\x90\xa5\x07\xc5\x70\xed\x6d\x70\xb2\x78\xf9\x6c\xd0\x05\x26\x39\x15\xab\xee\xdd\x3e\xc0\x2b\xa0\x3a\x42\x2c\xb0\xb2\x3d\x98\xae\x88\x37\x2e\x15\x11\x7b\x83\xb5\xdc\x2b\xd8\x76\x4f\xeb\x5e\x03\x36\xf0\x67\x3b\x38\xb4\xb1\x41\x3e\x3f\x3b\x66\xdf\xd2\x22\xb1\x42\x8e\x8b\x2a\xd5\x10\xf4\x55\xd9\xa1\x55\x01\x4b\x36\x16\x9f\x01\xb7\xc5\x7b\xe2\xd6\xc0\x57\x4d\x93\xc4\xa5\xb7\xd5\xfd\x41\xca\xc7\x6b\xdd\xe7\xcc\x3e\x64\x51\x7e\x50\x94\xf8\xde\xba\x3b\xf0\xad\x21\x8a\x6b\x7e\x9b\xfa\x97\xdc\xce\x65\x8e\x56\x03\x2d\x43\x9b\x17\xa3\x88\x72\x43\x16\xef\xd9\xff\x9d\x20\xe5\x4a\x5b\x03\xa7\xa1\x9a\x6d\x16\xf3\xef\xf8\x4b\xcd\x0f\x31\x0c\x06\xf9\xf2\x62\x00\x69\x87\x09\x6c\x70\x5a\x31\xcc\xac\xe5\x65\x1c\xe0\x61\xe4\x2d\xfe\x75\x3c\xb2\xcf\x19\xa5\xf5\xce\xc0\xd1\xbf\x0f\x7b\x38\x3d\xff\x34\x34\xa3\x7f\xa7\xef\xdf\x44\xac\x9f\x02\x00\x00\xff\xff\x13\xb9\x10\x95\x48\x0b\x00\x00")

func ReleaseLinuxConfContractsGroupmanagerCppAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsGroupmanagerCppAbiJson,
		"../../release/linux/conf/contracts/groupManager.cpp.abi.json",
	)
}

func ReleaseLinuxConfContractsGroupmanagerCppAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsGroupmanagerCppAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/groupManager.cpp.abi.json", size: 2888, mode: os.FileMode(436), modTime: time.Unix(1595301341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ReleaseLinuxConfContractsNodemanagerCppAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x4b\xc3\x30\x18\xc6\xef\xfb\x14\x21\xe7\x9e\x54\x3c\xec\x26\xe8\x65\x42\x2f\x1e\xc7\x0e\xb1\x79\x5b\x02\xe9\x9b\xd2\x3c\x19\x14\xd9\x77\x97\x54\x5b\x3b\xd4\xb1\x5a\x65\xd0\xda\x43\x4b\xc3\xfb\x27\xcf\x2f\x79\x92\xed\x4a\x08\x21\x5e\xda\x77\x7c\x24\xab\x92\xe4\x5a\x48\xa5\xb5\x4c\x3e\x86\x0d\x57\x01\x5e\xae\xc5\xb6\x1f\x3b\x4e\xfc\x54\x80\x9d\xa6\x8d\x77\xfc\x84\x7a\x50\xa8\x0f\x43\x53\xb5\x61\x1e\xb5\xe1\x42\x1e\x05\x1c\xfa\xbf\xdd\x60\x0a\x2e\x60\xec\x1c\x4e\x35\x36\x8c\xeb\xab\x73\xfa\x66\x8e\x3d\x14\x23\x26\xe5\xca\x7a\x1a\x72\xe9\xaa\xe5\x81\x33\x18\xc7\x6f\x05\x0f\xc9\x77\x58\x0b\xc2\x9d\xb5\xa9\xd3\xe4\xbf\xc6\xfb\x87\x8a\xcf\x47\x3d\x94\x8c\x3a\x4c\x52\xbc\x57\xd6\xe8\x8d\x33\x1c\x45\x4f\xdb\x52\x55\x78\xb6\x26\x7b\xa4\x66\x3e\x1b\x6a\x2a\xdd\xe8\x32\x9f\x86\xf2\xdf\xab\xbf\x8e\xb6\x20\x9c\xf0\xe9\x5c\xd0\x5e\xe6\x50\x08\x95\x56\x98\x78\x1a\xb4\xdf\xb1\xca\x92\xb9\xac\xdb\xc5\xae\xaf\xd4\xd5\xa5\xb2\x0f\x91\xcf\x92\xae\xb1\x82\x70\x4f\x96\x40\x7a\x71\xd2\x53\x07\x93\x37\x3f\x33\x6b\xd7\x2b\x18\xc6\xed\xcd\x58\x33\x8e\xd7\xdd\x65\xd0\x9e\x18\xef\xc2\x56\xbb\xd7\x00\x00\x00\xff\xff\x67\x87\x5c\x95\xe6\x0a\x00\x00")

func ReleaseLinuxConfContractsNodemanagerCppAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsNodemanagerCppAbiJson,
		"../../release/linux/conf/contracts/nodeManager.cpp.abi.json",
	)
}

func ReleaseLinuxConfContractsNodemanagerCppAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsNodemanagerCppAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/nodeManager.cpp.abi.json", size: 2790, mode: os.FileMode(436), modTime: time.Unix(1595301341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ReleaseLinuxConfContractsParammanagerCppAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x96\xc1\x4f\xc2\x30\x14\xc6\xef\xfb\x2b\x9a\x9d\x39\xa9\xf1\xc0\x6d\xa2\x21\x26\xc6\x70\xc0\x13\xe1\x50\x4b\xc1\x86\xad\x6d\xfa\x5e\x95\xc5\xf0\xbf\x9b\xb1\x0c\x21\x14\xa8\x74\x2c\x73\x1c\x48\x68\xca\xd7\xf7\xfd\xde\xb7\xbd\x4e\x22\x42\x08\xf9\xde\x7c\x17\x9f\x58\xd2\x8c\xc7\x7d\x12\x03\xc7\x21\x85\x81\x92\x68\x28\xc3\xd7\x62\xb5\xf7\xbb\x4b\x48\x6d\x11\xe2\x3e\x99\x6c\xd7\xf6\x75\x0e\xf4\x98\x5b\x69\xbb\x0f\x73\x5d\x9e\x8b\x46\xc8\x45\xbc\xb7\x61\xbd\xfd\x35\xdd\xa9\x41\x59\xac\x8a\xd8\x5d\x66\x4a\x02\x52\x89\x85\xd8\x9c\xa6\xb0\x57\x77\x75\xca\xdc\x4a\x86\x42\xc9\xf2\x9c\x75\xef\x18\x85\x85\x27\x85\x23\x75\xf9\xc2\xa9\x07\xc8\xae\x73\x34\x36\xc8\x38\x70\x7c\x86\x91\x51\x33\xcb\xf8\x53\xa6\x31\x7f\x48\x15\x5b\x86\x45\x40\x9c\x14\x3c\x28\xd5\x0a\x89\xb7\x37\x2d\x4a\x82\x37\x90\x2b\xa6\xc1\x1f\x4a\xcd\x69\x18\xaf\x86\x14\x5e\x44\x26\x30\x2c\x04\xe8\xd2\x71\xda\xbc\xbf\x6b\x51\xef\xcf\xd9\xbf\x72\xcb\xfd\x58\xd4\xdc\xf2\x4d\xc2\xeb\xe9\xfa\xfb\x11\xa9\x00\xb3\x0d\x35\xde\x03\x42\x17\x7b\x9f\xa4\xa9\xfa\x4a\x64\x9e\x30\xa6\xac\xc4\x47\xae\x53\x95\x57\x73\x30\x74\x0c\xf8\x8a\x3b\x71\xb4\x25\x1b\xc0\x71\xf0\xc1\xd9\xb2\xaa\xbb\x74\x31\xe2\x26\x13\x00\xc5\xff\xc3\xae\x4b\x85\xb4\x53\xcc\x09\xa5\x55\x73\xf2\x02\x2c\x9d\x9b\x98\x8b\x8b\x1e\xa1\xce\x61\xd8\x5c\x23\x13\xad\x8d\xfa\xe4\x25\x00\x3e\xab\xed\x2d\x72\x56\x36\x00\x42\x63\x57\xca\x3f\xc1\xe9\x66\x3e\xc6\xab\x37\xe0\x43\x0a\xa1\x81\x70\xe8\x04\xd8\x6c\x2c\x01\xa7\xed\xff\xd7\x96\x47\xd3\x28\xfa\x09\x00\x00\xff\xff\x9a\x54\x30\x38\x5d\x10\x00\x00")

func ReleaseLinuxConfContractsParammanagerCppAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsParammanagerCppAbiJson,
		"../../release/linux/conf/contracts/paramManager.cpp.abi.json",
	)
}

func ReleaseLinuxConfContractsParammanagerCppAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsParammanagerCppAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/paramManager.cpp.abi.json", size: 4189, mode: os.FileMode(436), modTime: time.Unix(1595301341, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ReleaseLinuxConfContractsUsermanagerCppAbiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xcf\x8a\xdb\x30\x10\xc6\xef\xfb\x14\xc2\x67\x9f\xda\xdb\xde\xd2\x2e\x94\x42\x49\xa1\xa5\xa7\x65\x0f\x22\x1a\x67\x0d\x5e\xc9\x48\xe3\x42\x28\x79\xf7\x22\x67\x93\xf8\x8f\x14\xbb\x95\x76\x77\x9c\x55\x0e\x81\x28\x42\xfe\xe6\xa7\xcf\x33\x62\x74\x7f\xc3\x18\x63\x7f\xda\x6f\xfb\xc9\x24\x7f\x82\xec\x96\x65\x06\xf0\x67\x53\x83\x5e\x89\xa7\x52\x66\xf9\x79\x42\x29\xeb\x06\x4d\x76\xcb\xee\x1f\x3a\xa3\xaa\x41\xd7\xf0\x46\x49\x83\x5c\xa2\x5d\xb1\xe0\x95\x81\xee\x4a\xb8\xab\xdb\x47\x15\x8d\xdc\x60\xa9\x64\xd6\xfe\xb5\xcf\x7d\x92\xb6\x80\x2b\x21\xf4\xb7\xd2\xe0\xf7\xe2\x87\xaa\xc0\x2d\xeb\x34\xd6\x5f\x66\xb4\x1c\x72\xbd\x05\x1c\xac\x33\x12\x67\x50\x97\x72\x9b\xf5\x26\xec\x4f\xbf\x3c\x08\xe6\x4a\x88\xf3\xe0\x2e\x64\xd4\x4d\x28\x63\x4b\xc4\x7c\xda\x59\xd4\x60\x4c\x18\x63\x2e\x84\x7e\x87\x74\x19\x9b\xe6\xbb\xb6\x23\x41\x70\x65\x7f\x85\x77\x03\xd7\xc7\x96\x0b\xf1\xf9\x91\x97\xb2\x4d\x59\xc9\xc0\x2e\xc6\xb3\x73\xf0\x5c\xc8\xe1\x2e\x4e\x84\xc7\x40\xd6\x4a\x40\x34\xc0\x57\x96\x26\xc2\x01\x0b\xa8\x52\x9e\x88\x05\x79\xa6\x8d\x13\xe4\x17\x81\x2c\xa0\x4a\x90\xe3\x40\xbe\x54\xf0\x94\x44\xcd\x37\x98\x30\xbf\xb0\x97\x13\xe8\x98\xa0\x2f\xe6\xe6\x23\xea\x3b\xa8\x2b\xb5\x03\x9d\x68\x07\xd2\x9e\x61\xeb\xc4\x3a\x0a\xeb\x0b\xae\xfe\x65\x40\x87\x41\x6d\x0c\xe8\xaf\xb2\x50\x09\x6c\x87\x49\x2d\x38\x82\x65\x7b\x07\x66\x33\xa0\xf3\x9f\xc6\xed\xbb\x7f\x5e\xa4\xf9\xdc\x07\x88\xb1\xcc\x00\x96\xd7\xb1\x89\x5b\xc0\x55\x55\xd9\x4d\xf4\xa4\x1d\x72\x21\x47\xe8\x65\xda\x70\x27\xb2\xad\x3f\xbc\x09\xbf\x7a\xa3\xdb\x5f\x2f\x49\x7f\x37\x22\x61\x9c\xc6\xf8\xc8\x8d\xff\xda\x22\x3e\x40\xf6\x0f\x39\x33\xd3\xaa\x82\xf5\xc5\x4e\xd1\xdb\x65\xcc\x52\xe2\xc7\x0f\xaf\xbb\x59\xc3\xfb\xaf\x81\xb4\xf1\x06\x0e\x02\x3d\x32\x6b\x0e\xda\x87\xdb\x30\x40\xea\x8e\xe6\x79\x0e\xfc\x06\x89\x13\x6a\x51\x73\x69\x0a\xd0\x67\xc9\xe7\xac\xc7\x58\xbe\x08\xbd\xad\xfb\xec\xa4\x9c\x1e\x5f\xcf\xd5\x02\xcb\x89\xfa\xc1\xd5\xa5\x67\xec\xec\x62\x82\x7a\xbf\x68\xd5\xd4\x0e\xeb\x2e\x41\xef\xd1\xba\x39\x61\xbe\x8e\x3e\xe1\x52\xf4\x9e\x32\x03\xe9\xf7\xcd\xdd\xbb\x3a\x68\xa6\xaf\xf7\xc0\x78\x01\x7c\xc7\x4d\x14\x82\xf5\xcd\xa9\xb7\x83\x98\x9a\x5e\xcf\x95\xd8\xe9\x8d\x23\xae\xb7\x7b\x74\xa0\xaa\xd7\x5d\xdf\xe8\xf2\x75\xd5\x37\xca\x7c\x17\x55\xdf\xfa\x7a\xe9\xd7\x37\xff\xdd\x0c\xcd\xf3\xfa\x58\x6f\xdf\xc2\x84\xf5\x2e\xa2\xbe\x39\xf5\x76\x4e\xc1\xd4\xf4\x1e\xaf\x06\x18\xa1\x43\x7a\x4f\xc1\xb3\x4e\x57\xa7\xfd\xcd\x74\xde\x3c\xfc\x0d\x00\x00\xff\xff\x40\x83\x25\x3b\x1e\x2c\x00\x00")

func ReleaseLinuxConfContractsUsermanagerCppAbiJsonBytes() ([]byte, error) {
	return bindataRead(
		_ReleaseLinuxConfContractsUsermanagerCppAbiJson,
		"../../release/linux/conf/contracts/userManager.cpp.abi.json",
	)
}

func ReleaseLinuxConfContractsUsermanagerCppAbiJson() (*asset, error) {
	bytes, err := ReleaseLinuxConfContractsUsermanagerCppAbiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../release/linux/conf/contracts/userManager.cpp.abi.json", size: 11294, mode: os.FileMode(436), modTime: time.Unix(1595563144, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../release/linux/conf/contracts/cnsManager.cpp.abi.json": ReleaseLinuxConfContractsCnsmanagerCppAbiJson,
	"../../release/linux/conf/contracts/fireWall.abi.json": ReleaseLinuxConfContractsFirewallAbiJson,
	"../../release/linux/conf/contracts/groupManager.cpp.abi.json": ReleaseLinuxConfContractsGroupmanagerCppAbiJson,
	"../../release/linux/conf/contracts/nodeManager.cpp.abi.json": ReleaseLinuxConfContractsNodemanagerCppAbiJson,
	"../../release/linux/conf/contracts/paramManager.cpp.abi.json": ReleaseLinuxConfContractsParammanagerCppAbiJson,
	"../../release/linux/conf/contracts/userManager.cpp.abi.json": ReleaseLinuxConfContractsUsermanagerCppAbiJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"release": &bintree{nil, map[string]*bintree{
				"linux": &bintree{nil, map[string]*bintree{
					"conf": &bintree{nil, map[string]*bintree{
						"contracts": &bintree{nil, map[string]*bintree{
							"cnsManager.cpp.abi.json": &bintree{ReleaseLinuxConfContractsCnsmanagerCppAbiJson, map[string]*bintree{}},
							"fireWall.abi.json": &bintree{ReleaseLinuxConfContractsFirewallAbiJson, map[string]*bintree{}},
							"groupManager.cpp.abi.json": &bintree{ReleaseLinuxConfContractsGroupmanagerCppAbiJson, map[string]*bintree{}},
							"nodeManager.cpp.abi.json": &bintree{ReleaseLinuxConfContractsNodemanagerCppAbiJson, map[string]*bintree{}},
							"paramManager.cpp.abi.json": &bintree{ReleaseLinuxConfContractsParammanagerCppAbiJson, map[string]*bintree{}},
							"userManager.cpp.abi.json": &bintree{ReleaseLinuxConfContractsUsermanagerCppAbiJson, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

