package precompile

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _release_linux_conf_contracts_cnsmanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x41\x6b\xb4\x30\x10\xbd\xfb\x2b\x42\xce\x7b\xfa\xbe\xd2\xc3\xde\xba\x85\x42\x2f\x16\xda\xe3\xb2\x87\xa0\xa3\x0c\xd4\x89\x24\x93\x05\x5b\xfa\xdf\x8b\x82\xae\xae\x60\x75\xb5\xed\x36\xe8\x41\xd1\x24\xf3\x98\xf7\x26\x2f\x83\xfb\x40\x08\x21\xde\xab\x7b\x79\x49\x52\x19\xc8\xad\x90\x11\xd9\x67\x48\xd1\x32\x98\x07\xa3\xb3\x47\x42\x96\x9b\xd3\x34\xa4\xdc\xb1\x95\x5b\xb1\x6f\xbe\x75\x03\xf5\x02\x56\xcf\x4d\x7f\x9c\x8b\xbc\x1a\xb7\x6c\x90\x52\xd9\x99\xf0\xb1\x19\x1b\xfd\x08\xc6\xa2\xa6\xc9\x00\xcd\xdb\xa1\x95\x9c\x76\x3c\x35\xbb\x21\x60\x24\xfe\xff\x6f\x0c\x6e\xa4\xc9\xb2\x22\x2e\x17\x25\xea\xd5\xb6\xf9\x6a\xa2\x25\x8e\x22\x2e\x53\x0d\x5a\x0c\x0d\x0b\xe8\xa3\x70\xa3\x01\x54\x1c\x1b\xb0\x76\xad\x8c\x6e\x65\xc4\x68\x20\x5a\xb7\xf4\x9f\x12\x2e\x05\xbe\xd7\xc4\x46\x45\x7c\xd7\xab\xea\x55\xbf\x33\xfc\x65\x80\xdb\x02\xb2\x71\x73\xf5\xab\x2d\x19\xe2\x5a\xc9\x99\x1a\xe6\x2a\x85\xd0\x65\x53\x8b\x75\xb4\x8a\x65\xfc\x17\x7c\x1b\xac\x93\xd1\xbb\xc1\x63\x15\x77\xc5\x93\xc1\x14\x69\x9e\x9a\xfa\x3c\xc6\x8c\x9c\xbd\x20\x1b\x93\x13\xd7\xbb\x22\xec\x1a\xd6\x4f\x59\xde\xd5\x9e\x28\xcb\xb2\xbb\xc8\x99\xe2\x5d\xbb\xf5\x5d\x76\xe1\x3d\xdb\xd7\xe5\xce\x1e\x5b\xc7\xef\x10\x1d\x6a\xc6\xa4\xb8\x8c\xd2\x1a\xcb\x21\xf1\xed\xcd\xd4\xd6\x64\x7a\xde\xf5\x0a\x38\x02\xf1\x97\xa6\x78\xf1\xaf\x8e\x79\x7d\xf3\x32\x69\x05\x87\xe0\x33\x00\x00\xff\xff\x6b\x0c\x17\xf6\xd4\x11\x00\x00")

func release_linux_conf_contracts_cnsmanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_cnsmanager_cpp_abi_json,
		"../../release/linux/conf/contracts/cnsManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_firewall_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x4b\xc3\x40\x10\xbd\xe7\x57\x2c\x7b\xce\x49\xc5\x43\x6f\xe2\x07\x78\xd1\x83\xc7\x52\xc2\xd2\x4c\x64\x21\x9d\x0d\x3b\xb3\x6a\x90\xfe\x77\x69\x6b\xe2\x46\x8b\x66\xa5\x25\x65\xd9\x1c\x02\x49\x66\xdf\x63\xde\x07\x64\x9e\x09\x21\xc4\xfb\xf6\xbe\xb9\x24\xaa\x15\xc8\x99\x90\x45\x41\x2d\x15\x77\xaf\x8f\x0d\xa0\xcc\xbf\xbe\x6b\x6c\x1c\x93\x9c\x89\x79\xff\x6e\x88\xf0\x03\x49\x95\xa5\x05\x22\x0f\xa4\x1f\xe1\xb6\xd9\x8e\x10\x5b\x8d\xcf\x72\x30\xb0\xee\x9f\x16\x1e\xbd\x71\x1c\xca\xff\x1b\xb1\x46\x3e\x3f\x1b\xc3\xbb\x34\x48\xac\x90\x37\x87\x2a\x55\x13\xf8\x9a\x74\x68\x95\xc3\x25\x6b\x83\x3b\xc0\x75\xfe\x97\xb6\xd7\xb5\x19\x02\x25\x71\x0f\x27\xee\x55\x59\x4e\x23\x6d\x3e\x9a\x60\xb7\xcf\xd1\xf0\xad\xab\x21\x25\x63\x5f\xed\x40\xd9\x38\xb3\x11\xbf\x79\x37\x50\xc7\x69\x5d\xaa\xf5\x37\xb4\xd0\x64\x3c\x01\xa7\x64\xa4\x64\xec\x4b\x06\x2b\x76\x14\xef\x8f\xd6\x78\x62\x5f\x5e\xb6\xee\x20\xea\xde\xaf\x1a\x63\x4f\xbd\x7a\x27\xe9\xdb\xb4\xad\xb8\x7d\x9b\xce\xb7\x78\x5b\xf1\x60\x58\x57\xed\xff\x54\xed\xb8\x9c\x46\xbe\xbc\x08\x8d\x7a\xf8\xde\xdd\x09\x78\x01\xe4\xcf\xc5\xb2\x45\xf6\x11\x00\x00\xff\xff\x8c\x09\x5e\xaa\x14\x10\x00\x00")

func release_linux_conf_contracts_firewall_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_firewall_abi_json,
		"../../release/linux/conf/contracts/fireWall.abi.json",
	)
}

var _release_linux_conf_contracts_groupmanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xb1\x4e\xc3\x30\x10\xdd\xfb\x15\x96\xe7\x4c\x80\x18\xba\x51\x55\x42\x65\x28\x48\x8c\x55\x07\x2b\xbe\x04\x4b\xc9\xd9\xf2\x9d\x87\x0a\xf5\xdf\x91\x8d\x1a\x52\x01\xa5\x60\x20\x15\x24\x43\xa4\x24\xe7\xe7\x7b\xef\xdd\x8b\x57\x13\x21\x84\x78\x4c\xf7\x78\x49\x54\x2d\xc8\xa9\x90\xa5\x07\xc5\x70\xed\x6d\x70\xb2\x78\xf9\x6c\xd0\x05\x26\x39\x15\xab\xee\xdd\x3e\xc0\x2b\xa0\x3a\x42\x2c\xb0\xb2\x3d\x98\xae\x88\x37\x2e\x15\x11\x7b\x83\xb5\xdc\x2b\xd8\x76\x4f\xeb\x5e\x03\x36\xf0\x67\x3b\x38\xb4\xb1\x41\x3e\x3f\x3b\x66\xdf\xd2\x22\xb1\x42\x8e\x8b\x2a\xd5\x10\xf4\x55\xd9\xa1\x55\x01\x4b\x36\x16\x9f\x01\xb7\xc5\x7b\xe2\xd6\xc0\x57\x4d\x93\xc4\xa5\xb7\xd5\xfd\x41\xca\xc7\x6b\xdd\xe7\xcc\x3e\x64\x51\x7e\x50\x94\xf8\xde\xba\x3b\xf0\xad\x21\x8a\x6b\x7e\x9b\xfa\x97\xdc\xce\x65\x8e\x56\x03\x2d\x43\x9b\x17\xa3\x88\x72\x43\x16\xef\xd9\xff\x9d\x20\xe5\x4a\x5b\x03\xa7\xa1\x9a\x6d\x16\xf3\xef\xf8\x4b\xcd\x0f\x31\x0c\x06\xf9\xf2\x62\x00\x69\x87\x09\x6c\x70\x5a\x31\xcc\xac\xe5\x65\x1c\xe0\x61\xe4\x2d\xfe\x75\x3c\xb2\xcf\x19\xa5\xf5\xce\xc0\xd1\xbf\x0f\x7b\x38\x3d\xff\x34\x34\xa3\x7f\xa7\xef\xdf\x44\xac\x9f\x02\x00\x00\xff\xff\x13\xb9\x10\x95\x48\x0b\x00\x00")

func release_linux_conf_contracts_groupmanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_groupmanager_cpp_abi_json,
		"../../release/linux/conf/contracts/groupManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_nodemanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x4b\xc3\x30\x18\xc6\xef\xfb\x14\x21\xe7\x9e\x54\x3c\xec\x26\xe8\x65\x42\x2f\x1e\xc7\x0e\xb1\x79\x5b\x02\xe9\x9b\xd2\x3c\x19\x14\xd9\x77\x97\x54\x5b\x3b\xd4\xb1\x5a\x65\xd0\xda\x43\x4b\xc3\xfb\x27\xcf\x2f\x79\x92\xed\x4a\x08\x21\x5e\xda\x77\x7c\x24\xab\x92\xe4\x5a\x48\xa5\xb5\x4c\x3e\x86\x0d\x57\x01\x5e\xae\xc5\xb6\x1f\x3b\x4e\xfc\x54\x80\x9d\xa6\x8d\x77\xfc\x84\x7a\x50\xa8\x0f\x43\x53\xb5\x61\x1e\xb5\xe1\x42\x1e\x05\x1c\xfa\xbf\xdd\x60\x0a\x2e\x60\xec\x1c\x4e\x35\x36\x8c\xeb\xab\x73\xfa\x66\x8e\x3d\x14\x23\x26\xe5\xca\x7a\x1a\x72\xe9\xaa\xe5\x81\x33\x18\xc7\x6f\x05\x0f\xc9\x77\x58\x0b\xc2\x9d\xb5\xa9\xd3\xe4\xbf\xc6\xfb\x87\x8a\xcf\x47\x3d\x94\x8c\x3a\x4c\x52\xbc\x57\xd6\xe8\x8d\x33\x1c\x45\x4f\xdb\x52\x55\x78\xb6\x26\x7b\xa4\x66\x3e\x1b\x6a\x2a\xdd\xe8\x32\x9f\x86\xf2\xdf\xab\xbf\x8e\xb6\x20\x9c\xf0\xe9\x5c\xd0\x5e\xe6\x50\x08\x95\x56\x98\x78\x1a\xb4\xdf\xb1\xca\x92\xb9\xac\xdb\xc5\xae\xaf\xd4\xd5\xa5\xb2\x0f\x91\xcf\x92\xae\xb1\x82\x70\x4f\x96\x40\x7a\x71\xd2\x53\x07\x93\x37\x3f\x33\x6b\xd7\x2b\x18\xc6\xed\xcd\x58\x33\x8e\xd7\xdd\x65\xd0\x9e\x18\xef\xc2\x56\xbb\xd7\x00\x00\x00\xff\xff\x67\x87\x5c\x95\xe6\x0a\x00\x00")

func release_linux_conf_contracts_nodemanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_nodemanager_cpp_abi_json,
		"../../release/linux/conf/contracts/nodeManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_parammanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x97\x31\x6f\xf2\x30\x10\x86\xf7\xfc\x8a\x28\x33\xd3\xf7\x55\x1d\xd8\x52\x5a\xa1\x4a\x15\x62\xa0\x13\x62\x70\xcd\x41\x2d\x12\x3b\xca\x9d\x29\x51\xc5\x7f\xaf\x42\x64\x0a\xc2\x80\x1b\x07\x14\x85\x01\x09\xcb\x7e\x7d\xf7\xdc\x4b\xee\x32\x0d\xc2\x30\x0c\xbf\x77\xdf\xe5\x27\x92\x2c\x85\xa8\x1f\x46\x08\x34\x64\x38\x50\x92\x72\xc6\x69\x54\xae\xf6\x7e\x77\x09\x99\x69\xc2\xa8\x1f\x4e\xf7\x6b\xc7\x3a\x27\x7a\xdc\xae\xb4\xdf\x47\x45\x56\xdd\x4b\xb9\x90\xcb\xe8\x68\xc3\x76\xff\x6b\x76\x10\x83\xd2\x64\x82\x38\x5c\xe6\x4a\x22\x31\x49\xa5\xd8\x82\x25\x78\x14\xb7\xb9\x65\xa1\x25\x27\xa1\x64\x75\xcf\xb6\x77\x8e\xc2\xd2\x91\xc2\x99\xb8\x5c\xe1\x34\x03\xe4\x30\x73\xca\xb5\x57\xe2\x08\xf4\x8a\xe3\x5c\xcd\x35\x87\x97\x34\xa3\xe2\x29\x51\x7c\xe5\x67\x01\x71\x51\xf0\x24\x54\x2d\x24\xfd\xff\xd7\x22\x27\x38\x03\xb9\xa1\x1b\xdc\xa1\x34\xec\x86\xc9\x66\xc8\xf0\x4d\xa4\x82\xfc\x4c\x40\x36\x1d\x6b\x9a\x8f\x0f\x2d\xaa\xfd\xb5\xf4\x6f\x5c\x72\x37\x16\x0d\x97\x7c\xe7\xf0\x66\xaa\xfe\x71\x46\xca\x23\xd9\x3b\x15\xde\x01\x42\x17\x6b\x1f\x27\x89\xfa\x8a\x65\x11\x73\xae\xb4\xa4\x67\xc8\x12\x55\x98\x3e\xe8\xdb\x06\x5c\xc5\xad\x38\xda\xe2\x0d\x04\x1a\x7c\x02\x5f\x99\xb8\xab\x2c\xc6\x90\xa7\x02\xb1\x3c\xef\x37\x2e\x95\xd2\x56\x31\x2b\x94\x56\xf5\xc9\x1a\x58\x3a\xd7\x31\x97\xb5\xfe\x42\x9d\xc3\xb0\x1b\x23\xe3\x2c\xcb\xd5\x1a\x2a\x00\x30\x6f\xec\x29\x72\x55\xd6\x03\xc2\xdd\x46\xca\x3f\xc1\xe9\xa6\x3f\x26\x9b\x77\x84\x21\x43\x5f\x43\x58\x74\xac\x69\xb6\x6a\xbe\xb8\x96\x7e\xe7\x86\x8b\x91\x22\xb1\x28\xea\xd5\xfa\x62\xe4\x3d\xd7\xd3\xee\x6f\xd4\xe6\x04\xac\xc1\x0c\x1e\xdb\x60\x16\x04\x3f\x01\x00\x00\xff\xff\x79\xc1\x92\x87\x36\x11\x00\x00")

func release_linux_conf_contracts_parammanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_parammanager_cpp_abi_json,
		"../../release/linux/conf/contracts/paramManager.cpp.abi.json",
	)
}

var _release_linux_conf_contracts_usermanager_cpp_abi_json = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x99\xcf\x8a\xdb\x30\x10\xc6\xef\xfb\x14\xc2\x67\x9f\xda\xdb\xde\xd2\x2e\x94\x42\x49\xa1\xa5\xa7\x65\x0f\x22\x1a\x67\x0d\x5e\xc9\x48\xe3\x42\x28\x79\xf7\x22\x67\x93\xf8\x8f\x14\xbb\x95\x76\x77\x9c\x55\x0e\x81\x28\x42\xfe\xe6\xa7\xcf\x33\x62\x74\x7f\xc3\x18\x63\x7f\xda\x6f\xfb\xc9\x24\x7f\x82\xec\x96\x65\x06\xf0\x67\x53\x83\x5e\x89\xa7\x52\x66\xf9\x79\x42\x29\xeb\x06\x4d\x76\xcb\xee\x1f\x3a\xa3\xaa\x41\xd7\xf0\x46\x49\x83\x5c\xa2\x5d\xb1\xe0\x95\x81\xee\x4a\xb8\xab\xdb\x47\x15\x8d\xdc\x60\xa9\x64\xd6\xfe\xb5\xcf\x7d\x92\xb6\x80\x2b\x21\xf4\xb7\xd2\xe0\xf7\xe2\x87\xaa\xc0\x2d\xeb\x34\xd6\x5f\x66\xb4\x1c\x72\xbd\x05\x1c\xac\x33\x12\x67\x50\x97\x72\x9b\xf5\x26\xec\x4f\xbf\x3c\x08\xe6\x4a\x88\xf3\xe0\x2e\x64\xd4\x4d\x28\x63\x4b\xc4\x7c\xda\x59\xd4\x60\x4c\x18\x63\x2e\x84\x7e\x87\x74\x19\x9b\xe6\xbb\xb6\x23\x41\x70\x65\x7f\x85\x77\x03\xd7\xc7\x96\x0b\xf1\xf9\x91\x97\xb2\x4d\x59\xc9\xc0\x2e\xc6\xb3\x73\xf0\x5c\xc8\xe1\x2e\x4e\x84\xc7\x40\xd6\x4a\x40\x34\xc0\x57\x96\x26\xc2\x01\x0b\xa8\x52\x9e\x88\x05\x79\xa6\x8d\x13\xe4\x17\x81\x2c\xa0\x4a\x90\xe3\x40\xbe\x54\xf0\x94\x44\xcd\x37\x98\x30\xbf\xb0\x97\x13\xe8\x98\xa0\x2f\xe6\xe6\x23\xea\x3b\xa8\x2b\xb5\x03\x9d\x68\x07\xd2\x9e\x61\xeb\xc4\x3a\x0a\xeb\x0b\xae\xfe\x65\x40\x87\x41\x6d\x0c\xe8\xaf\xb2\x50\x09\x6c\x87\x49\x2d\x38\x82\x65\x7b\x07\x66\x33\xa0\xf3\x9f\xc6\xed\xbb\x7f\x5e\xa4\xf9\xdc\x07\x88\xb1\xcc\x00\x96\xd7\xb1\x89\x5b\xc0\x55\x55\xd9\x4d\xf4\xa4\x1d\x72\x21\x47\xe8\x65\xda\x70\x27\xb2\xad\x3f\xbc\x09\xbf\x7a\xa3\xdb\x5f\x2f\x49\x7f\x37\x22\x61\x9c\xc6\xf8\xc8\x8d\xff\xda\x22\x3e\x40\xf6\x0f\x39\x33\xd3\xaa\x82\xf5\xc5\x4e\xd1\xdb\x65\xcc\x52\xe2\xc7\x0f\xaf\xbb\x59\xc3\xfb\xaf\x81\xb4\xf1\x06\x0e\x02\x3d\x32\x6b\x0e\xda\x87\xdb\x30\x40\xea\x8e\xe6\x79\x0e\xfc\x06\x89\x13\x6a\x51\x73\x69\x0a\xd0\x67\xc9\xe7\xac\xc7\x58\xbe\x08\xbd\xad\xfb\xec\xa4\x9c\x1e\x5f\xcf\xd5\x02\xcb\x89\xfa\xc1\xd5\xa5\x67\xec\xec\x62\x82\x7a\xbf\x68\xd5\xd4\x0e\xeb\x2e\x41\xef\xd1\xba\x39\x61\xbe\x8e\x3e\xe1\x52\xf4\x9e\x32\x03\xe9\xf7\xcd\xdd\xbb\x3a\x68\xa6\xaf\xf7\xc0\x78\x01\x7c\xc7\x4d\x14\x82\xf5\xcd\xa9\xb7\x83\x98\x9a\x5e\xcf\x95\xd8\xe9\x8d\x23\xae\xb7\x7b\x74\xa0\xaa\xd7\x5d\xdf\xe8\xf2\x75\xd5\x37\xca\x7c\x17\x55\xdf\xfa\x7a\xe9\xd7\x37\xff\xdd\x0c\xcd\xf3\xfa\x58\x6f\xdf\xc2\x84\xf5\x2e\xa2\xbe\x39\xf5\x76\x4e\xc1\xd4\xf4\x1e\xaf\x06\x18\xa1\x43\x7a\x4f\xc1\xb3\x4e\x57\xa7\xfd\xcd\x74\xde\x3c\xfc\x0d\x00\x00\xff\xff\x40\x83\x25\x3b\x1e\x2c\x00\x00")

func release_linux_conf_contracts_usermanager_cpp_abi_json() ([]byte, error) {
	return bindata_read(
		_release_linux_conf_contracts_usermanager_cpp_abi_json,
		"../../release/linux/conf/contracts/userManager.cpp.abi.json",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"../../release/linux/conf/contracts/cnsManager.cpp.abi.json": release_linux_conf_contracts_cnsmanager_cpp_abi_json,
	"../../release/linux/conf/contracts/fireWall.abi.json": release_linux_conf_contracts_firewall_abi_json,
	"../../release/linux/conf/contracts/groupManager.cpp.abi.json": release_linux_conf_contracts_groupmanager_cpp_abi_json,
	"../../release/linux/conf/contracts/nodeManager.cpp.abi.json": release_linux_conf_contracts_nodemanager_cpp_abi_json,
	"../../release/linux/conf/contracts/paramManager.cpp.abi.json": release_linux_conf_contracts_parammanager_cpp_abi_json,
	"../../release/linux/conf/contracts/userManager.cpp.abi.json": release_linux_conf_contracts_usermanager_cpp_abi_json,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"..": &_bintree_t{nil, map[string]*_bintree_t{
		"..": &_bintree_t{nil, map[string]*_bintree_t{
			"release": &_bintree_t{nil, map[string]*_bintree_t{
				"linux": &_bintree_t{nil, map[string]*_bintree_t{
					"conf": &_bintree_t{nil, map[string]*_bintree_t{
						"contracts": &_bintree_t{nil, map[string]*_bintree_t{
							"cnsManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_cnsmanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"fireWall.abi.json": &_bintree_t{release_linux_conf_contracts_firewall_abi_json, map[string]*_bintree_t{
							}},
							"groupManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_groupmanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"nodeManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_nodemanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"paramManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_parammanager_cpp_abi_json, map[string]*_bintree_t{
							}},
							"userManager.cpp.abi.json": &_bintree_t{release_linux_conf_contracts_usermanager_cpp_abi_json, map[string]*_bintree_t{
							}},
						}},
					}},
				}},
			}},
		}},
	}},
}}
